{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { fetchDailyOrders } from './dailyOrdersAsyncthunk';\nexport const dailyOrdersSlice = createSlice({\n  name: 'dailyOrders',\n  initialState: {\n    data: null,\n    // This can be an array or an object depending on your API response structure\n    status: 'idle',\n    // 'idle', 'loading', 'succeeded', 'failed'\n    error: null\n  },\n  reducers: {\n    // You can add additional reducers here if needed\n  },\n  extraReducers: builder => {\n    // Handle the result of the fetchDailyOrders action\n    builder.addCase(fetchDailyOrders.pending, state => {\n      state.status = 'loading';\n    });\n    builder.addCase(fetchDailyOrders.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.data = action.payload;\n    });\n    builder.addCase(fetchDailyOrders.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {} = counterSlice.actions;\nexport default dailyOrdersSlice.reducer;","map":{"version":3,"names":["createSlice","fetchDailyOrders","dailyOrdersSlice","name","initialState","data","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","counterSlice","actions","reducer"],"sources":["C:/Users/victor.yanez/Projects/ASN/front-end/src/app/features/orders/dailyOrdersslice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { fetchDailyOrders } from './dailyOrdersAsyncthunk';\r\n\r\nexport const dailyOrdersSlice = createSlice({\r\n    name: 'dailyOrders',\r\n    initialState: {\r\n      data: null, // This can be an array or an object depending on your API response structure\r\n      status: 'idle', // 'idle', 'loading', 'succeeded', 'failed'\r\n      error: null,\r\n    },\r\n    reducers: {\r\n      // You can add additional reducers here if needed\r\n    },\r\n    extraReducers: (builder) => {\r\n      // Handle the result of the fetchDailyOrders action\r\n      builder.addCase(fetchDailyOrders.pending, (state) => {\r\n        state.status = 'loading';\r\n      });\r\n      builder.addCase(fetchDailyOrders.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.data = action.payload;\r\n      });\r\n      builder.addCase(fetchDailyOrders.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.error.message;\r\n      });\r\n    },\r\n  });\r\n  \r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { } = counterSlice.actions\r\n\r\nexport default dailyOrdersSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,gBAAgB,QAAQ,yBAAyB;AAE1D,OAAO,MAAMC,gBAAgB,GAAGF,WAAW,CAAC;EACxCG,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IACZC,IAAI,EAAE,IAAI;IAAE;IACZC,MAAM,EAAE,MAAM;IAAE;IAChBC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACV,gBAAgB,CAACW,OAAO,EAAGC,KAAK,IAAK;MACnDA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC;IACFI,OAAO,CAACC,OAAO,CAACV,gBAAgB,CAACa,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC7DF,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1BO,KAAK,CAACR,IAAI,GAAGU,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAACV,gBAAgB,CAACgB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC5DF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAGJ;AACA,OAAO,MAAM,CAAE,CAAC,GAAGC,YAAY,CAACC,OAAO;AAEvC,eAAelB,gBAAgB,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}