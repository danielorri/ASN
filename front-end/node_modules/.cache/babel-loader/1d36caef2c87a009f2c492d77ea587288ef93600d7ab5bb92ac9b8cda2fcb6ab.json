{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yanez\\\\Projects\\\\ASNProject\\\\front-end\\\\src\\\\components\\\\dashboard.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport PartForm from \"../forms/partsForm\";\nimport ShippingForm from \"../forms/shippingForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  //Shipping\n  const initialShippingValues = {\n    PackingSLipID: \"\",\n    ShippingDate: \"\",\n    DeliveryDate: \"\",\n    CarrierName: \"\",\n    TrackingNo: \"\",\n    PlantCode: \"\"\n  };\n  const [shipping, setShipping] = useState(initialShippingValues);\n  const handleShippingChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setShipping({\n      ...shipping,\n      [name]: value\n    });\n  };\n\n  //Part\n  const initialPart = {\n    partNo: \"\",\n    quantity: \"\",\n    mixedOrMaster: \"Mixed\",\n    repackedQuantity: \"\",\n    customized: []\n  };\n  const [parts, setParts] = useState([initialPart]);\n  const handleInputChange = (e, index) => {\n    const {\n      name,\n      value\n    } = e.target;\n    const updatedParts = [...parts];\n    updatedParts[index][name] = value;\n\n    // Automatically set the \"Repacked Quantity\" to the same value as \"Quantity\"\n    if (name === \"quantity\") {\n      updatedParts[index].repackedQuantity = value;\n    }\n    // Check if both \"Quantity\" and \"Repacked Quantity\" have valid numeric values\n    const quantityValue = parseFloat(updatedParts[index].quantity);\n    const repackedQuantityValue = parseFloat(updatedParts[index].repackedQuantity);\n\n    // Calculate and update the \"Customized\" array\n    if (!isNaN(quantityValue) && !isNaN(repackedQuantityValue) && repackedQuantityValue !== 0) {\n      const result = [];\n      let quantity = quantityValue; // Use a new variable for quantity\n      const repackedQuantity = repackedQuantityValue; // Use a new variable for repackedQuantity\n\n      while (quantity >= repackedQuantity) {\n        result.push(repackedQuantity.toString());\n        quantity -= repackedQuantity;\n      }\n      if (quantity > 0) {\n        result.push(quantity.toString());\n      }\n      updatedParts[index].customized = result;\n    } else {\n      updatedParts[index].customized = [];\n    }\n    // Add a new row if the user is typing in the first field of the last row\n    if (index === updatedParts.length - 1 && name === \"partNo\" && value.trim() !== \"\") {\n      updatedParts.push({\n        partNo: \"\",\n        quantity: \"\",\n        mixedOrMaster: \"Mixed\",\n        repackedQuantity: \"\",\n        customized: []\n      });\n    }\n    setParts(updatedParts);\n  };\n  const handleRemovePart = index => {\n    const updatedParts = [...parts];\n\n    // Remove the row if the user clears the \"Part No.\" field\n    if (!updatedParts[index].partNo) {\n      updatedParts.splice(index, 1);\n    }\n    setParts(updatedParts);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ShippingForm, {\n      shipping: shipping,\n      handleChange: handleShippingChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PartForm, {\n      handleInputChange: handleInputChange,\n      handleRemovePart: handleRemovePart,\n      parts: parts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"Do9Mf1wvQYDlz+hqt/eZdaiNk2g=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","PartForm","ShippingForm","jsxDEV","_jsxDEV","Dashboard","_s","initialShippingValues","PackingSLipID","ShippingDate","DeliveryDate","CarrierName","TrackingNo","PlantCode","shipping","setShipping","handleShippingChange","e","name","value","target","initialPart","partNo","quantity","mixedOrMaster","repackedQuantity","customized","parts","setParts","handleInputChange","index","updatedParts","quantityValue","parseFloat","repackedQuantityValue","isNaN","result","push","toString","length","trim","handleRemovePart","splice","children","handleChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yanez/Projects/ASNProject/front-end/src/components/dashboard.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport PartForm from \"../forms/partsForm\";\r\nimport ShippingForm from \"../forms/shippingForm\";\r\n\r\nconst Dashboard = ()=>{\r\n\r\n    //Shipping\r\n    const initialShippingValues= {\r\n        PackingSLipID: \"\",\r\n        ShippingDate: \"\",\r\n        DeliveryDate: \"\",\r\n        CarrierName: \"\",\r\n        TrackingNo: \"\",\r\n        PlantCode: \"\",\r\n    };\r\n    const [shipping, setShipping] = useState(initialShippingValues);\r\n\r\n    const handleShippingChange = (e) =>{\r\n        const { name, value }= e.target;\r\n        setShipping({ ...shipping, [name]: value});\r\n    }\r\n\r\n    //Part\r\n    const initialPart = {\r\n        partNo: \"\",\r\n        quantity: \"\",\r\n        mixedOrMaster: \"Mixed\",\r\n        repackedQuantity: \"\",\r\n        customized:[]\r\n      };\r\n    \r\n      const [parts, setParts] = useState([initialPart]);\r\n    \r\n      const handleInputChange = (e, index) => {\r\n        const { name, value } = e.target;\r\n        const updatedParts = [...parts];\r\n        updatedParts[index][name] = value;\r\n    \r\n         // Automatically set the \"Repacked Quantity\" to the same value as \"Quantity\"\r\n         if (name === \"quantity\") {\r\n            updatedParts[index].repackedQuantity = value;\r\n          }\r\n            // Check if both \"Quantity\" and \"Repacked Quantity\" have valid numeric values\r\n            const quantityValue = parseFloat(updatedParts[index].quantity);\r\n            const repackedQuantityValue = parseFloat(updatedParts[index].repackedQuantity);\r\n\r\n            // Calculate and update the \"Customized\" array\r\n            if (!isNaN(quantityValue) && !isNaN(repackedQuantityValue) && repackedQuantityValue !== 0) {\r\n            const result = [];\r\n            let quantity = quantityValue; // Use a new variable for quantity\r\n            const repackedQuantity = repackedQuantityValue; // Use a new variable for repackedQuantity\r\n\r\n            while (quantity >= repackedQuantity) {\r\n                result.push(repackedQuantity.toString());\r\n                quantity -= repackedQuantity;\r\n            }\r\n            if (quantity > 0) {\r\n                result.push(quantity.toString());\r\n            }\r\n            updatedParts[index].customized = result;\r\n            } else {\r\n            updatedParts[index].customized = [];\r\n            }\r\n         // Add a new row if the user is typing in the first field of the last row\r\n         if (index === updatedParts.length - 1 && name === \"partNo\" && value.trim() !== \"\") {\r\n            updatedParts.push({\r\n                partNo: \"\",\r\n                quantity: \"\",\r\n                mixedOrMaster: \"Mixed\",\r\n                repackedQuantity: \"\",\r\n                customized:[]\r\n              });\r\n          }\r\n    \r\n        setParts(updatedParts);\r\n      };\r\n    \r\n      const handleRemovePart = (index) => {\r\n        const updatedParts = [...parts];\r\n    \r\n        // Remove the row if the user clears the \"Part No.\" field\r\n        if (!updatedParts[index].partNo) {\r\n          updatedParts.splice(index, 1);\r\n        }\r\n    \r\n        setParts(updatedParts);\r\n      };\r\n    return(\r\n        <div>\r\n            <ShippingForm \r\n            shipping ={shipping}\r\n            handleChange ={handleShippingChange}\r\n            />\r\n            <PartForm\r\n            handleInputChange={handleInputChange}\r\n            handleRemovePart={handleRemovePart}\r\n            parts={parts} \r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}