{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victor.yanez\\\\Projects\\\\Robot\\\\ASN\\\\front-end\\\\src\\\\components\\\\dailyOrders\\\\dailyOrders.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchDailyOrders, updateCsvData } from '../../app/features/orders/dailyOrdersAsyncthunk';\nimport AlwaysOpenAcordeon from './dailyAcordeon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DailyOrders = () => {\n  _s();\n  const dispatch = useDispatch();\n  const orders = useSelector(state => state.dailyOrders.data);\n  const status = useSelector(state => state.dailyOrders.status);\n  const error = useSelector(state => state.dailyOrders.error);\n  const [selectedDate, setSelectedDate] = useState(getTodayDate());\n  const [groupedOrders, setGroupedOrders] = useState({});\n\n  // Update groupedOrders when orders change\n  useEffect(() => {\n    // Dispatch the fetchDailyOrders action with the selected date\n    dispatch(fetchDailyOrders(selectedDate));\n  }, [dispatch, selectedDate]);\n  useEffect(() => {\n    const updatedGroupedOrders = {};\n    if (orders) {\n      orders.forEach(order => {\n        const key = `${order.CardCode}-${order.ShipToCode}-${order.U_SIF_PO_Sample || 'N'}`;\n        if (!updatedGroupedOrders[key]) {\n          updatedGroupedOrders[key] = [];\n        }\n        updatedGroupedOrders[key].push(order);\n      });\n    }\n    setGroupedOrders(updatedGroupedOrders);\n  }, [orders]);\n\n  // Function to get today's date in the format 'YYYY-MM-DD'\n  function getTodayDate() {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    const day = String(today.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n\n  // Handle date change\n  const handleDateChange = event => {\n    setSelectedDate(event.target.value);\n  };\n  const handleCarrierChange = (key, newCarrier) => {\n    setGroupedOrders(prevGroupedOrders => {\n      const stringKey = String(key);\n      return {\n        ...prevGroupedOrders,\n        [stringKey]: prevGroupedOrders[stringKey].map(order => ({\n          ...order,\n          CARRIER: newCarrier\n        }))\n      };\n    });\n  };\n  const handleEditField = (key, index, field, value) => {\n    setGroupedOrders(prevGroupedOrders => {\n      // Ensure key is a string\n      const stringKey = String(key);\n      return {\n        ...prevGroupedOrders,\n        [stringKey]: prevGroupedOrders[stringKey].map((item, i) => {\n          // If the current index matches the provided index, update the field\n          if (i === index) {\n            return {\n              ...item,\n              [field]: value\n            };\n          }\n          // Otherwise, leave the item unchanged\n          return item;\n        })\n      };\n    });\n  };\n  const handleUpdateCsv = () => {\n    // Ungroup groupedOrders and dispatch update\n    const ungroupedOrders = Object.values(groupedOrders).flat();\n    dispatch(updateCsvData(ungroupedOrders));\n  };\n\n  // Render loading state\n  if (status === 'loading') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render error state\n  if (status === 'failed') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-around\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center m-3\",\n        children: \"Daily Orders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateCsv,\n        className: \"btn btn-primary ms-2\",\n        children: \"Update CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"datePicker\",\n          className: \"me-2 fw-bold\",\n          children: \"Date: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"datePicker\",\n          value: selectedDate,\n          onChange: handleDateChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), groupedOrders && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(groupedOrders).map(groupKey => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '90%',\n            margin: 'auto'\n          },\n          children: /*#__PURE__*/_jsxDEV(AlwaysOpenAcordeon, {\n            gkey: groupKey,\n            handleCarrierChange: handleCarrierChange,\n            onEditField: handleEditField,\n            groupedOrders: groupedOrders[groupKey]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)\n        }, groupKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(DailyOrders, \"zICWXO3L/uQ9e1G0Q0niSOz8iWM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = DailyOrders;\nexport default DailyOrders;\nvar _c;\n$RefreshReg$(_c, \"DailyOrders\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","fetchDailyOrders","updateCsvData","AlwaysOpenAcordeon","jsxDEV","_jsxDEV","DailyOrders","_s","dispatch","orders","state","dailyOrders","data","status","error","selectedDate","setSelectedDate","getTodayDate","groupedOrders","setGroupedOrders","updatedGroupedOrders","forEach","order","key","CardCode","ShipToCode","U_SIF_PO_Sample","push","today","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","handleDateChange","event","target","value","handleCarrierChange","newCarrier","prevGroupedOrders","stringKey","map","CARRIER","handleEditField","index","field","item","i","handleUpdateCsv","ungroupedOrders","Object","values","flat","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","htmlFor","type","id","onChange","keys","groupKey","style","width","margin","gkey","onEditField","_c","$RefreshReg$"],"sources":["C:/Users/victor.yanez/Projects/Robot/ASN/front-end/src/components/dailyOrders/dailyOrders.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchDailyOrders, updateCsvData } from '../../app/features/orders/dailyOrdersAsyncthunk';\r\nimport AlwaysOpenAcordeon from './dailyAcordeon';\r\n\r\nconst DailyOrders = () => {\r\n  const dispatch = useDispatch();\r\n  const orders = useSelector((state) => state.dailyOrders.data);\r\n  const status = useSelector((state) => state.dailyOrders.status);\r\n  const error = useSelector((state) => state.dailyOrders.error);\r\n\r\n  const [selectedDate, setSelectedDate] = useState(getTodayDate());\r\n  const [groupedOrders, setGroupedOrders] = useState({});\r\n\r\n \r\n    // Update groupedOrders when orders change\r\n    useEffect(() => {\r\n        // Dispatch the fetchDailyOrders action with the selected date\r\n        dispatch(fetchDailyOrders(selectedDate));\r\n      }, [dispatch, selectedDate]);\r\n\r\n    useEffect(() => {\r\n        const updatedGroupedOrders = {};\r\n        if (orders) {\r\n          orders.forEach((order) => {\r\n            const key = `${order.CardCode}-${order.ShipToCode}-${order.U_SIF_PO_Sample || 'N'}`;\r\n            if (!updatedGroupedOrders[key]) {\r\n              updatedGroupedOrders[key] = [];\r\n            }\r\n            updatedGroupedOrders[key].push(order);\r\n          });\r\n        }\r\n        setGroupedOrders(updatedGroupedOrders);\r\n      }, [orders]); \r\n\r\n\r\n  // Function to get today's date in the format 'YYYY-MM-DD'\r\n  function getTodayDate() {\r\n    const today = new Date();\r\n    const year = today.getFullYear();\r\n    const month = String(today.getMonth() + 1).padStart(2, '0');\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n\r\n  // Handle date change\r\n  const handleDateChange = (event) => {\r\n    setSelectedDate(event.target.value);\r\n  };\r\n\r\n  const handleCarrierChange = (key, newCarrier) => {\r\n    setGroupedOrders((prevGroupedOrders) => {\r\n      const stringKey = String(key);\r\n\r\n      return {\r\n        ...prevGroupedOrders,\r\n        [stringKey]: prevGroupedOrders[stringKey].map((order) => ({\r\n          ...order,\r\n          CARRIER: newCarrier,\r\n        })),\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleEditField = (key, index, field, value) => {\r\n    setGroupedOrders((prevGroupedOrders) => {\r\n      // Ensure key is a string\r\n      const stringKey = String(key);\r\n  \r\n      return {\r\n        ...prevGroupedOrders,\r\n        [stringKey]: prevGroupedOrders[stringKey].map((item, i) => {\r\n          // If the current index matches the provided index, update the field\r\n          if (i === index) {\r\n            return {\r\n              ...item,\r\n              [field]: value,\r\n            };\r\n          }\r\n          // Otherwise, leave the item unchanged\r\n          return item;\r\n        }),\r\n      };\r\n    });\r\n  };\r\n  \r\n  const handleUpdateCsv = () => {\r\n    // Ungroup groupedOrders and dispatch update\r\n    const ungroupedOrders = Object.values(groupedOrders).flat();\r\n    dispatch(updateCsvData(ungroupedOrders));\r\n  };\r\n  \r\n\r\n  // Render loading state\r\n  if (status === 'loading') {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Render error state\r\n  if (status === 'failed') {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n        <div className='d-flex justify-content-around'>\r\n            <h1 className='text-center m-3'>Daily Orders</h1>\r\n            <button onClick={handleUpdateCsv} className=\"btn btn-primary ms-2\">Update CSV</button>\r\n            {/* Date Picker */}\r\n            <div className=\"text-center mb-3\">\r\n            <label htmlFor=\"datePicker\" className='me-2 fw-bold'>Date: </label>\r\n            <input\r\n                type=\"date\"\r\n                id=\"datePicker\"\r\n                value={selectedDate}\r\n                onChange={handleDateChange}\r\n            />\r\n            </div>\r\n        </div>\r\n\r\n      {groupedOrders && (\r\n        <div>\r\n          {Object.keys(groupedOrders).map((groupKey) => {\r\n                return (\r\n                    <div key={groupKey} style={{ width: '90%', margin: 'auto' }}>\r\n                        <AlwaysOpenAcordeon gkey={groupKey} handleCarrierChange={handleCarrierChange} onEditField={handleEditField} groupedOrders={groupedOrders[groupKey]} />\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyOrders;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}