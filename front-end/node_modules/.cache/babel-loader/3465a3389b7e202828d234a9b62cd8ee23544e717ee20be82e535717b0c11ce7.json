{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victor.yanez\\\\Projects\\\\ASN\\\\front-end\\\\src\\\\components\\\\dailyOrders\\\\dailyOrders.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchDailyOrders } from '../../app/features/orders/dailyOrdersAsyncthunk';\nimport AlwaysOpenAcordeon from './dailyAcordeon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DailyOrders = () => {\n  _s();\n  const dispatch = useDispatch();\n  const orders = useSelector(state => state.dailyOrders.data);\n  const status = useSelector(state => state.dailyOrders.status);\n  const error = useSelector(state => state.dailyOrders.error);\n  const [selectedDate, setSelectedDate] = useState(getTodayDate());\n  const [groupedOrders, setGroupedOrders] = useState({});\n\n  // Update groupedOrders when orders change\n  useEffect(() => {\n    // Dispatch the fetchDailyOrders action with the selected date\n    dispatch(fetchDailyOrders(selectedDate));\n  }, [dispatch, selectedDate]);\n  useEffect(() => {\n    const updatedGroupedOrders = {};\n    if (orders) {\n      orders.forEach(order => {\n        const key = `${order.CardCode}-${order.ShipToCode}-${order.U_SIF_PO_Sample || 'N'}`;\n        if (!updatedGroupedOrders[key]) {\n          updatedGroupedOrders[key] = [];\n        }\n        updatedGroupedOrders[key].push(order);\n      });\n    }\n    setGroupedOrders(updatedGroupedOrders);\n  }, [orders]);\n\n  // Function to get today's date in the format 'YYYY-MM-DD'\n  function getTodayDate() {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = String(today.getMonth() + 1).padStart(2, '0');\n    const day = String(today.getDate()).padStart(2, '0');\n    return `${year}/${month}/${day}`;\n  }\n\n  // Handle date change\n  const handleDateChange = event => {\n    setSelectedDate(event.target.value);\n  };\n  const handleEditField = (key, secondKey, field, value) => {\n    setGroupedOrders(prevGroupedOrders => {\n      // Ensure key is a string\n      const stringKey = String(key);\n\n      // Find the index of the item in the array based on a condition (replace 'DocNum' with the actual property you want to match)\n      const index = prevGroupedOrders[stringKey].findIndex(item => item.DocNum === secondKey);\n\n      // Update the specific item in the array\n      const updatedArray = [...prevGroupedOrders[stringKey]];\n      updatedArray[index] = {\n        ...updatedArray[index],\n        [field]: value\n      };\n      return {\n        ...prevGroupedOrders,\n        [stringKey]: updatedArray\n      };\n    });\n  };\n\n  // Render loading state\n  if (status === 'loading') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render error state\n  if (status === 'failed') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-around\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center m-3\",\n        children: \"Daily Orders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"datePicker\",\n          className: \"me-2 fw-bold\",\n          children: \"Date: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          id: \"datePicker\",\n          value: selectedDate,\n          onChange: handleDateChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), groupedOrders && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(groupedOrders).map(groupKey => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '90%',\n            margin: 'auto'\n          },\n          children: /*#__PURE__*/_jsxDEV(AlwaysOpenAcordeon, {\n            gkey: groupKey,\n            onEditField: handleEditField,\n            groupedOrders: groupedOrders[groupKey]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)\n        }, groupKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(DailyOrders, \"zICWXO3L/uQ9e1G0Q0niSOz8iWM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = DailyOrders;\nexport default DailyOrders;\nvar _c;\n$RefreshReg$(_c, \"DailyOrders\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","fetchDailyOrders","AlwaysOpenAcordeon","jsxDEV","_jsxDEV","DailyOrders","_s","dispatch","orders","state","dailyOrders","data","status","error","selectedDate","setSelectedDate","getTodayDate","groupedOrders","setGroupedOrders","updatedGroupedOrders","forEach","order","key","CardCode","ShipToCode","U_SIF_PO_Sample","push","today","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","handleDateChange","event","target","value","handleEditField","secondKey","field","prevGroupedOrders","stringKey","index","findIndex","item","DocNum","updatedArray","children","fileName","_jsxFileName","lineNumber","columnNumber","className","htmlFor","type","id","onChange","Object","keys","map","groupKey","style","width","margin","gkey","onEditField","_c","$RefreshReg$"],"sources":["C:/Users/victor.yanez/Projects/ASN/front-end/src/components/dailyOrders/dailyOrders.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchDailyOrders } from '../../app/features/orders/dailyOrdersAsyncthunk';\r\nimport AlwaysOpenAcordeon from './dailyAcordeon';\r\n\r\nconst DailyOrders = () => {\r\n  const dispatch = useDispatch();\r\n  const orders = useSelector((state) => state.dailyOrders.data);\r\n  const status = useSelector((state) => state.dailyOrders.status);\r\n  const error = useSelector((state) => state.dailyOrders.error);\r\n\r\n  const [selectedDate, setSelectedDate] = useState(getTodayDate());\r\n  const [groupedOrders, setGroupedOrders] = useState({});\r\n\r\n \r\n    // Update groupedOrders when orders change\r\n    useEffect(() => {\r\n        // Dispatch the fetchDailyOrders action with the selected date\r\n        dispatch(fetchDailyOrders(selectedDate));\r\n      }, [dispatch, selectedDate]);\r\n\r\n    useEffect(() => {\r\n        const updatedGroupedOrders = {};\r\n        if (orders) {\r\n          orders.forEach((order) => {\r\n            const key = `${order.CardCode}-${order.ShipToCode}-${order.U_SIF_PO_Sample || 'N'}`;\r\n            if (!updatedGroupedOrders[key]) {\r\n              updatedGroupedOrders[key] = [];\r\n            }\r\n            updatedGroupedOrders[key].push(order);\r\n          });\r\n        }\r\n        setGroupedOrders(updatedGroupedOrders);\r\n      }, [orders]); \r\n\r\n\r\n  // Function to get today's date in the format 'YYYY-MM-DD'\r\n  function getTodayDate() {\r\n    const today = new Date();\r\n    const year = today.getFullYear();\r\n    const month = String(today.getMonth() + 1).padStart(2, '0');\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    return `${year}/${month}/${day}`;\r\n  }\r\n\r\n  // Handle date change\r\n  const handleDateChange = (event) => {\r\n    setSelectedDate(event.target.value);\r\n  };\r\n\r\n  const handleEditField = (key, secondKey, field, value) => {\r\n    setGroupedOrders((prevGroupedOrders) => {\r\n        // Ensure key is a string\r\n        const stringKey = String(key);\r\n\r\n        // Find the index of the item in the array based on a condition (replace 'DocNum' with the actual property you want to match)\r\n        const index = prevGroupedOrders[stringKey].findIndex(item => item.DocNum === secondKey);\r\n\r\n        // Update the specific item in the array\r\n        const updatedArray = [...prevGroupedOrders[stringKey]];\r\n        updatedArray[index] = {\r\n            ...updatedArray[index],\r\n            [field]: value,\r\n        };\r\n\r\n        return {\r\n            ...prevGroupedOrders,\r\n            [stringKey]: updatedArray,\r\n        };\r\n    });\r\n};\r\n\r\n\r\n  \r\n  \r\n\r\n  // Render loading state\r\n  if (status === 'loading') {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  // Render error state\r\n  if (status === 'failed') {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n        <div className='d-flex justify-content-around'>\r\n            <h1 className='text-center m-3'>Daily Orders</h1>\r\n\r\n            {/* Date Picker */}\r\n            <div className=\"text-center mb-3\">\r\n            <label htmlFor=\"datePicker\" className='me-2 fw-bold'>Date: </label>\r\n            <input\r\n                type=\"date\"\r\n                id=\"datePicker\"\r\n                value={selectedDate}\r\n                onChange={handleDateChange}\r\n            />\r\n            </div>\r\n        </div>\r\n\r\n      {groupedOrders && (\r\n        <div>\r\n          {Object.keys(groupedOrders).map((groupKey) => {\r\n                return (\r\n                    <div key={groupKey} style={{ width: '90%', margin: 'auto' }}>\r\n                        <AlwaysOpenAcordeon gkey={groupKey} onEditField={handleEditField} groupedOrders={groupedOrders[groupKey]} />\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyOrders;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}