{"ast":null,"code":"const getParts = async shipping => {\n  try {\n    const response = await fetch('http://localhost:3010/getParts', {\n      method: 'POST',\n      // Assuming your server expects a POST request\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(shipping)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    // Handle errors as needed\n  }\n};\nmodule.exports = getParts;","map":{"version":3,"names":["getParts","shipping","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","console","module","exports"],"sources":["A:/Robot/ASN/front-end/src/FunctionHelpers/getParts.js"],"sourcesContent":["const getParts = async(shipping) =>{\r\n    try {\r\n        const response = await fetch('http://localhost:3010/getParts', {\r\n          method: 'POST', // Assuming your server expects a POST request\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(shipping),\r\n        });\r\n  \r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n  \r\n        const data = await response.json();\r\n        return data; \r\n        \r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        // Handle errors as needed\r\n      }\r\n};\r\n\r\nmodule.exports = getParts;"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,MAAMC,QAAQ,IAAI;EAC/B,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;MAC7DC,MAAM,EAAE,MAAM;MAAE;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;IAC/B,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBR,QAAQ,CAACS,MAAO,EAAC,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EAEb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C;EACF;AACN,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGjB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}