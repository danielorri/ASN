{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { fetchInventory, fetchInventoryConsolidation, fetchInventoryLocked } from './inventoryAsyncThunk';\nconst inventorySlice = createSlice({\n  name: 'inventory',\n  initialState: {\n    inventory: null,\n    consolidation: null,\n    lockedInventory: null,\n    inventoryStatus: 'idle',\n    consolidationStatus: 'idle',\n    lockedInventoryStatus: 'idle',\n    error: null\n  },\n  reducers: {\n    // Add other reducers if needed\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchInventory.pending, state => {\n      state.inventoryStatus = 'loading';\n    }).addCase(fetchInventory.fulfilled, (state, action) => {\n      state.inventoryStatus = 'succeeded';\n      state.inventory = action.payload;\n    }).addCase(fetchInventory.rejected, (state, action) => {\n      state.inventoryStatus = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchInventoryConsolidation.pending, state => {\n      state.consolidationStatus = 'loading';\n    }).addCase(fetchInventoryConsolidation.fulfilled, (state, action) => {\n      state.consolidationStatus = 'succeeded';\n      state.consolidation = action.payload;\n    }).addCase(fetchInventoryConsolidation.rejected, (state, action) => {\n      state.consolidationStatus = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchInventoryLocked.pending, state => {\n      state.lockedInventoryStatus = 'loading';\n    }).addCase(fetchInventoryLocked.fulfilled, (state, action) => {\n      state.lockedInventoryStatus = 'succeeded';\n      state.lockedInventory = action.payload;\n    }).addCase(fetchInventoryLocked.rejected, (state, action) => {\n      state.lockedInventoryStatus = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default inventorySlice.reducer;","map":{"version":3,"names":["createSlice","fetchInventory","fetchInventoryConsolidation","fetchInventoryLocked","inventorySlice","name","initialState","inventory","consolidation","lockedInventory","inventoryStatus","consolidationStatus","lockedInventoryStatus","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["C:/Users/victor.yanez/Projects/Robot/ASN/front-end/src/app/features/Inventory/inventorySlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { fetchInventory, fetchInventoryConsolidation, fetchInventoryLocked } from './inventoryAsyncThunk';\r\n\r\nconst inventorySlice = createSlice({\r\n    name: 'inventory',\r\n    initialState: {\r\n      inventory: null,\r\n      consolidation: null,\r\n      lockedInventory: null,\r\n      inventoryStatus: 'idle',\r\n      consolidationStatus: 'idle',\r\n      lockedInventoryStatus: 'idle',\r\n      error: null,\r\n    },\r\n    reducers: {\r\n      // Add other reducers if needed\r\n    },\r\n    extraReducers: (builder) => {\r\n      builder\r\n        .addCase(fetchInventory.pending, (state) => {\r\n          state.inventoryStatus = 'loading';\r\n        })\r\n        .addCase(fetchInventory.fulfilled, (state, action) => {\r\n          state.inventoryStatus = 'succeeded';\r\n          state.inventory = action.payload;\r\n        })\r\n        .addCase(fetchInventory.rejected, (state, action) => {\r\n          state.inventoryStatus = 'failed';\r\n          state.error = action.error.message;\r\n        })\r\n        .addCase(fetchInventoryConsolidation.pending, (state) => {\r\n          state.consolidationStatus = 'loading';\r\n        })\r\n        .addCase(fetchInventoryConsolidation.fulfilled, (state, action) => {\r\n          state.consolidationStatus = 'succeeded';\r\n          state.consolidation = action.payload;\r\n        })\r\n        .addCase(fetchInventoryConsolidation.rejected, (state, action) => {\r\n          state.consolidationStatus = 'failed';\r\n          state.error = action.error.message;\r\n        })\r\n        .addCase(fetchInventoryLocked.pending, (state) => {\r\n          state.lockedInventoryStatus = 'loading';\r\n        })\r\n        .addCase(fetchInventoryLocked.fulfilled, (state, action) => {\r\n          state.lockedInventoryStatus = 'succeeded';\r\n          state.lockedInventory = action.payload;\r\n        })\r\n        .addCase(fetchInventoryLocked.rejected, (state, action) => {\r\n          state.lockedInventoryStatus = 'failed';\r\n          state.error = action.error.message;\r\n        })\r\n    },\r\n  });\r\n  \r\n\r\nexport default inventorySlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,EAAEC,2BAA2B,EAAEC,oBAAoB,QAAQ,uBAAuB;AAEzG,MAAMC,cAAc,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAE;IACZC,SAAS,EAAE,IAAI;IACfC,aAAa,EAAE,IAAI;IACnBC,eAAe,EAAE,IAAI;IACrBC,eAAe,EAAE,MAAM;IACvBC,mBAAmB,EAAE,MAAM;IAC3BC,qBAAqB,EAAE,MAAM;IAC7BC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAChB,cAAc,CAACiB,OAAO,EAAGC,KAAK,IAAK;MAC1CA,KAAK,CAACT,eAAe,GAAG,SAAS;IACnC,CAAC,CAAC,CACDO,OAAO,CAAChB,cAAc,CAACmB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACpDF,KAAK,CAACT,eAAe,GAAG,WAAW;MACnCS,KAAK,CAACZ,SAAS,GAAGc,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC,CACDL,OAAO,CAAChB,cAAc,CAACsB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAACT,eAAe,GAAG,QAAQ;MAChCS,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC,CACDP,OAAO,CAACf,2BAA2B,CAACgB,OAAO,EAAGC,KAAK,IAAK;MACvDA,KAAK,CAACR,mBAAmB,GAAG,SAAS;IACvC,CAAC,CAAC,CACDM,OAAO,CAACf,2BAA2B,CAACkB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACjEF,KAAK,CAACR,mBAAmB,GAAG,WAAW;MACvCQ,KAAK,CAACX,aAAa,GAAGa,MAAM,CAACC,OAAO;IACtC,CAAC,CAAC,CACDL,OAAO,CAACf,2BAA2B,CAACqB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAChEF,KAAK,CAACR,mBAAmB,GAAG,QAAQ;MACpCQ,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC,CACDP,OAAO,CAACd,oBAAoB,CAACe,OAAO,EAAGC,KAAK,IAAK;MAChDA,KAAK,CAACP,qBAAqB,GAAG,SAAS;IACzC,CAAC,CAAC,CACDK,OAAO,CAACd,oBAAoB,CAACiB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC1DF,KAAK,CAACP,qBAAqB,GAAG,WAAW;MACzCO,KAAK,CAACV,eAAe,GAAGY,MAAM,CAACC,OAAO;IACxC,CAAC,CAAC,CACDL,OAAO,CAACd,oBAAoB,CAACoB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACzDF,KAAK,CAACP,qBAAqB,GAAG,QAAQ;MACtCO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAGJ,eAAepB,cAAc,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}