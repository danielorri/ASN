{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\n\n// Define an asynchronous thunk for fetching data\nexport const fetchDailyOrders = createAsyncThunk('dailyOrders/fetchData', async (shipDate, {\n  signal\n}) => {\n  try {\n    // Construct the URL with the ShipDate parameter\n    const url = `http://10.100.110.185:3010/dailyorders?shipDate=${encodeURIComponent(shipDate)}`;\n\n    // Fetch data with an abort signal to handle cancellations\n    const response = await fetch(url, {\n      signal\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n});\n\n// Create an asyncThunk for updating the CSV with an array of objects\nexport const updateCsvData = createAsyncThunk('csv/updateData', async (dataArray, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`http://10.100.110.185:3010/insert-csv`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(dataArray)\n    });\n\n    // Check if the status code indicates a successful request\n    if (!response.ok) {\n      // If the response status code is not successful, use rejectWithValue\n      // This allows us to pass the error response object to the action's payload when it is rejected\n      const errorData = await response.json();\n      return rejectWithValue(errorData.message || 'Unknown API error');\n    }\n\n    // Assuming your API returns the updated list of data in the response body\n    const updatedData = await response.json();\n    return updatedData; // This will be used as the `payload` in the `fulfilled` action\n  } catch (error) {\n    // If an error occurs, pass it to the `rejected` action as the `payload`\n    return rejectWithValue(error.message);\n  }\n});","map":{"version":3,"names":["createAsyncThunk","fetchDailyOrders","shipDate","signal","url","encodeURIComponent","response","fetch","data","json","error","console","updateCsvData","dataArray","rejectWithValue","method","headers","body","JSON","stringify","ok","errorData","message","updatedData"],"sources":["C:/Users/victor.yanez/Projects/Robot/ASN/front-end/src/app/features/orders/dailyOrdersAsyncthunk.js"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n// Define an asynchronous thunk for fetching data\r\nexport const fetchDailyOrders = createAsyncThunk(\r\n  'dailyOrders/fetchData',\r\n  async (shipDate, { signal }) => {\r\n    try {\r\n      // Construct the URL with the ShipDate parameter\r\n      const url = `http://10.100.110.185:3010/dailyorders?shipDate=${encodeURIComponent(shipDate)}`;\r\n\r\n      // Fetch data with an abort signal to handle cancellations\r\n      const response = await fetch(url, { signal });\r\n      const data = await response.json();\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n);\r\n\r\n// Create an asyncThunk for updating the CSV with an array of objects\r\nexport const updateCsvData = createAsyncThunk(\r\n  'csv/updateData',\r\n  async (dataArray, { rejectWithValue }) => {\r\n    try {\r\n      const response = await fetch(`http://10.100.110.185:3010/insert-csv`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(dataArray),\r\n      });\r\n\r\n      // Check if the status code indicates a successful request\r\n      if (!response.ok) {\r\n        // If the response status code is not successful, use rejectWithValue\r\n        // This allows us to pass the error response object to the action's payload when it is rejected\r\n        const errorData = await response.json();\r\n        return rejectWithValue(errorData.message || 'Unknown API error');\r\n      }\r\n\r\n      // Assuming your API returns the updated list of data in the response body\r\n      const updatedData = await response.json();\r\n      return updatedData; // This will be used as the `payload` in the `fulfilled` action\r\n    } catch (error) {\r\n      // If an error occurs, pass it to the `rejected` action as the `payload`\r\n      return rejectWithValue(error.message);\r\n    }\r\n  }\r\n);"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;;AAEnD;AACA,OAAO,MAAMC,gBAAgB,GAAGD,gBAAgB,CAC9C,uBAAuB,EACvB,OAAOE,QAAQ,EAAE;EAAEC;AAAO,CAAC,KAAK;EAC9B,IAAI;IACF;IACA,MAAMC,GAAG,GAAI,mDAAkDC,kBAAkB,CAACH,QAAQ,CAAE,EAAC;;IAE7F;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;MAAED;IAAO,CAAC,CAAC;IAC7C,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CACF,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAGZ,gBAAgB,CAC3C,gBAAgB,EAChB,OAAOa,SAAS,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACxC,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,uCAAsC,EAAE;MACpEQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,SAAS;IAChC,CAAC,CAAC;;IAEF;IACA,IAAI,CAACP,QAAQ,CAACc,EAAE,EAAE;MAChB;MACA;MACA,MAAMC,SAAS,GAAG,MAAMf,QAAQ,CAACG,IAAI,CAAC,CAAC;MACvC,OAAOK,eAAe,CAACO,SAAS,CAACC,OAAO,IAAI,mBAAmB,CAAC;IAClE;;IAEA;IACA,MAAMC,WAAW,GAAG,MAAMjB,QAAQ,CAACG,IAAI,CAAC,CAAC;IACzC,OAAOc,WAAW,CAAC,CAAC;EACtB,CAAC,CAAC,OAAOb,KAAK,EAAE;IACd;IACA,OAAOI,eAAe,CAACJ,KAAK,CAACY,OAAO,CAAC;EACvC;AACF,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}