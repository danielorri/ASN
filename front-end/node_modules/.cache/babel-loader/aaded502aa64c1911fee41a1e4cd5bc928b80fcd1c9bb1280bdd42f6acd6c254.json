{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { fetchInventory, fetchInventoryConsolidation, fetchInventoryLocked } from './inventoryAsyncThunk';\nconst inventorySlice = createSlice({\n  name: 'inventory',\n  initialState: {\n    inventory: null,\n    consolidation: null,\n    lockedInventory: null,\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    // Add other reducers if needed\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchInventory.pending, state => {\n      state.status = 'loading';\n    });\n    builder.addCase(fetchInventory.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.inventory = action.payload;\n    });\n    builder.addCase(fetchInventory.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n    builder.addCase(fetchInventoryConsolidation.pending, state => {\n      state.status = 'loading';\n    });\n    builder.addCase(fetchInventoryConsolidation.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.consolidation = action.payload;\n    });\n    builder.addCase(fetchInventoryConsolidation.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n    builder.addCase(fetchInventoryLocked.pending, state => {\n      state.status = 'loading';\n    });\n    builder.addCase(fetchInventoryLocked.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.lockedInventory = action.payload;\n    });\n    builder.addCase(fetchInventoryLocked.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default inventorySlice.reducer;","map":{"version":3,"names":["createSlice","fetchInventory","fetchInventoryConsolidation","fetchInventoryLocked","inventorySlice","name","initialState","inventory","consolidation","lockedInventory","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["C:/Users/victor.yanez/Projects/Robot/ASN/front-end/src/app/features/Inventory/inventorySlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { fetchInventory, fetchInventoryConsolidation, fetchInventoryLocked } from './inventoryAsyncThunk';\r\n\r\nconst inventorySlice = createSlice({\r\n  name: 'inventory',\r\n  initialState: {\r\n    inventory: null,\r\n    consolidation: null,\r\n    lockedInventory: null,\r\n    status: 'idle',\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    // Add other reducers if needed\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchInventory.pending, (state) => {\r\n      state.status = 'loading';\r\n    });\r\n    builder.addCase(fetchInventory.fulfilled, (state, action) => {\r\n      \r\n      state.status = 'succeeded';\r\n      state.inventory = action.payload;\r\n    });\r\n    builder.addCase(fetchInventory.rejected, (state, action) => {\r\n      state.status = 'failed';\r\n      state.error = action.error.message;\r\n    });\r\n    builder.addCase(fetchInventoryConsolidation.pending, (state) => {\r\n        state.status = 'loading';\r\n      });\r\n      builder.addCase(fetchInventoryConsolidation.fulfilled, (state, action) => {\r\n        \r\n        state.status = 'succeeded';\r\n        state.consolidation = action.payload;\r\n      });\r\n      builder.addCase(fetchInventoryConsolidation.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.error.message;\r\n      });\r\n      builder.addCase(fetchInventoryLocked.pending, (state) => {\r\n        state.status = 'loading';\r\n      });\r\n      builder.addCase(fetchInventoryLocked.fulfilled, (state, action) => {\r\n        \r\n        state.status = 'succeeded';\r\n        state.lockedInventory = action.payload;\r\n      });\r\n      builder.addCase(fetchInventoryLocked.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default inventorySlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,EAAEC,2BAA2B,EAAEC,oBAAoB,QAAQ,uBAAuB;AAEzG,MAAMC,cAAc,GAAGJ,WAAW,CAAC;EACjCK,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAE;IACZC,SAAS,EAAE,IAAI;IACfC,aAAa,EAAE,IAAI;IACnBC,eAAe,EAAE,IAAI;IACrBC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACd,cAAc,CAACe,OAAO,EAAGC,KAAK,IAAK;MACjDA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC;IACFI,OAAO,CAACC,OAAO,CAACd,cAAc,CAACiB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAE3DF,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1BO,KAAK,CAACV,SAAS,GAAGY,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAACd,cAAc,CAACoB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC1DF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC;IACFR,OAAO,CAACC,OAAO,CAACb,2BAA2B,CAACc,OAAO,EAAGC,KAAK,IAAK;MAC5DA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC;IACFI,OAAO,CAACC,OAAO,CAACb,2BAA2B,CAACgB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAExEF,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1BO,KAAK,CAACT,aAAa,GAAGW,MAAM,CAACC,OAAO;IACtC,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAACb,2BAA2B,CAACmB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACvEF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC;IACFR,OAAO,CAACC,OAAO,CAACZ,oBAAoB,CAACa,OAAO,EAAGC,KAAK,IAAK;MACvDA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC;IACFI,OAAO,CAACC,OAAO,CAACZ,oBAAoB,CAACe,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAEjEF,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1BO,KAAK,CAACR,eAAe,GAAGU,MAAM,CAACC,OAAO;IACxC,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAACZ,oBAAoB,CAACkB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAChEF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAelB,cAAc,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}