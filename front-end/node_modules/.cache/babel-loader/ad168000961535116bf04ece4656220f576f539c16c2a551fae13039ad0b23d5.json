{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yanez\\\\Projects\\\\ASNProject\\\\front-end\\\\src\\\\components\\\\dashboard.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport PartForm from \"../forms/partsForm\";\nimport ShippingForm from \"../forms/shippingForm\";\nimport Repack from \"../FunctionHelpers/repackFunction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  //Shipping\n  const initialShippingValues = {\n    PackingSLipID: \"\",\n    ShippingDate: \"\",\n    DeliveryDate: \"\",\n    CarrierName: \"\",\n    TrackingNo: \"\",\n    PlantCode: \"\"\n  };\n  const [shipping, setShipping] = useState(initialShippingValues);\n  const handleShippingChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setShipping({\n      ...shipping,\n      [name]: value\n    });\n  };\n\n  //Part\n  const initialPart = {\n    partNo: \"\",\n    quantity: \"\",\n    mixedOrMaster: \"Mixed\",\n    repackedQuantity: \"\",\n    customized: []\n  };\n  const [parts, setParts] = useState([initialPart]);\n  const handleInputChange = (e, index) => {\n    const {\n      name,\n      value\n    } = e.target;\n    const updatedParts = [...parts];\n    updatedParts[index][name] = value;\n\n    // Automatically set the \"Repacked Quantity\" to the same value as \"Quantity\"\n    if (name === \"quantity\") {\n      updatedParts[index].repackedQuantity = value;\n    }\n\n    // Add a new row if the user is typing in the first field of the last row\n    if (index === updatedParts.length - 1 && name === \"partNo\" && value.trim() !== \"\") {\n      updatedParts.push({\n        partNo: \"\",\n        quantity: \"\",\n        mixedOrMaster: \"Mixed\",\n        repackedQuantity: \"\",\n        customized: []\n      });\n    }\n    setParts(updatedParts);\n  };\n  const handleRemovePart = index => {\n    const updatedParts = [...parts];\n    updatedParts.splice(index, 1);\n    setParts(updatedParts);\n  };\n\n  //Packages\n  const [editedCustomized, setEditedCustomized] = useState(new Array(parts.length).fill(\"\"));\n  const [editModes, setEditModes] = useState(new Array(parts.length).fill(false));\n  const handleEditPart = index => {\n    const newEditModes = [...editModes];\n    newEditModes[index] = !newEditModes[index];\n    setEditModes(newEditModes);\n  };\n\n  // Function to handle changes in individual customized inputs\n  const handleEditCustomizedChange = (e, index, subIndex) => {\n    const {\n      value\n    } = e.target;\n    const newCustomizedValues = [...editedCustomized[index]];\n    newCustomizedValues[subIndex] = parseFloat(value);\n    const newEditedCustomized = [...editedCustomized];\n    newEditedCustomized[index] = newCustomizedValues;\n    setEditedCustomized(newEditedCustomized);\n  };\n\n  // Function to check if the edited values equal the total quantity\n  const handleCheckTotal = index => {\n    const editedValues = editedCustomized[index];\n\n    // Check if editedValues is an array with valid numbers\n    if (!Array.isArray(editedValues) || editedValues.some(value => isNaN(parseFloat(value)))) {\n      handleEditPart(index);\n      return;\n    }\n\n    // Calculate the total quantity based on editedCustomized values\n    const totalQuantity = editedValues.reduce((acc, val) => acc + parseFloat(val), 0);\n\n    // Check if the total quantity matches the original quantity\n    if (totalQuantity === parts[index].quantity) {\n      // If they match, update the 'customized' array and exit edit mode\n      const newParts = [...parts];\n      newParts[index].customized = editedValues;\n      setParts(newParts);\n      handleEditPart(index); // Exit edit mode\n    } else {\n      // If they don't match, you can handle the error or display a message\n      alert(\"Total quantity does not match.\");\n    }\n  };\n\n  //Handle Repack\n  const handleRepack = () => {\n    const updatedParts = [...parts];\n    updatedParts.forEach((part, index) => {\n      if (part.quantity && part.repackedQuantity) {\n        updatedParts[index].customized = Repack(part.quantity, part.repackedQuantity);\n      } else {\n        updatedParts[index].customized = []; // Reset if either quantity or repackedQuantity is missing\n      }\n    });\n\n    setParts(updatedParts);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ShippingForm, {\n      shipping: shipping,\n      handleChange: handleShippingChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PartForm, {\n      handleInputChange: handleInputChange,\n      handleRemovePart: handleRemovePart,\n      parts: parts,\n      editModes: editModes,\n      handleEditCustomizedChange: handleEditCustomizedChange,\n      handleEditPart: handleEditPart,\n      handleCheckTotal: handleCheckTotal,\n      handleRepack: handleRepack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"t8UApUnpYGZz4RTESczcWiQ5YC0=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","PartForm","ShippingForm","Repack","jsxDEV","_jsxDEV","Dashboard","_s","initialShippingValues","PackingSLipID","ShippingDate","DeliveryDate","CarrierName","TrackingNo","PlantCode","shipping","setShipping","handleShippingChange","e","name","value","target","initialPart","partNo","quantity","mixedOrMaster","repackedQuantity","customized","parts","setParts","handleInputChange","index","updatedParts","length","trim","push","handleRemovePart","splice","editedCustomized","setEditedCustomized","Array","fill","editModes","setEditModes","handleEditPart","newEditModes","handleEditCustomizedChange","subIndex","newCustomizedValues","parseFloat","newEditedCustomized","handleCheckTotal","editedValues","isArray","some","isNaN","totalQuantity","reduce","acc","val","newParts","alert","handleRepack","forEach","part","children","handleChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yanez/Projects/ASNProject/front-end/src/components/dashboard.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport PartForm from \"../forms/partsForm\";\r\nimport ShippingForm from \"../forms/shippingForm\";\r\nimport Repack from \"../FunctionHelpers/repackFunction\";\r\n\r\nconst Dashboard = ()=>{\r\n\r\n    //Shipping\r\n    const initialShippingValues= {\r\n        PackingSLipID: \"\",\r\n        ShippingDate: \"\",\r\n        DeliveryDate: \"\",\r\n        CarrierName: \"\",\r\n        TrackingNo: \"\",\r\n        PlantCode: \"\",\r\n    };\r\n    const [shipping, setShipping] = useState(initialShippingValues);\r\n\r\n    const handleShippingChange = (e) =>{\r\n        const { name, value }= e.target;\r\n        setShipping({ ...shipping, [name]: value});\r\n    }\r\n\r\n    //Part\r\n    const initialPart = {\r\n        partNo: \"\",\r\n        quantity: \"\",\r\n        mixedOrMaster: \"Mixed\",\r\n        repackedQuantity: \"\",\r\n        customized:[]\r\n      };\r\n    \r\n      const [parts, setParts] = useState([initialPart]);\r\n    \r\n      const handleInputChange = (e, index) => {\r\n        const { name, value } = e.target;\r\n        const updatedParts = [...parts];\r\n        updatedParts[index][name] = value;\r\n    \r\n         // Automatically set the \"Repacked Quantity\" to the same value as \"Quantity\"\r\n         if (name === \"quantity\") {\r\n            updatedParts[index].repackedQuantity = value;\r\n          }\r\n\r\n         // Add a new row if the user is typing in the first field of the last row\r\n         if (index === updatedParts.length - 1 && name === \"partNo\" && value.trim() !== \"\") {\r\n            updatedParts.push({\r\n                partNo: \"\",\r\n                quantity: \"\",\r\n                mixedOrMaster: \"Mixed\",\r\n                repackedQuantity: \"\",\r\n                customized:[]\r\n              });\r\n          }\r\n    \r\n        setParts(updatedParts);\r\n      };\r\n    \r\n      const handleRemovePart = (index) => {\r\n        const updatedParts = [...parts];\r\n    \r\n        \r\n          updatedParts.splice(index, 1);\r\n        \r\n    \r\n        setParts(updatedParts);\r\n      };\r\n\r\n      //Packages\r\n      const [editedCustomized, setEditedCustomized] = useState(new Array(parts.length).fill(\"\"));\r\n      const [editModes, setEditModes] = useState(new Array(parts.length).fill(false));\r\n\r\n      const handleEditPart = (index) => {\r\n        const newEditModes = [...editModes];\r\n        newEditModes[index] = !newEditModes[index];\r\n        setEditModes(newEditModes);\r\n      };\r\n      \r\n      // Function to handle changes in individual customized inputs\r\n      const handleEditCustomizedChange = (e, index, subIndex) => {\r\n        const { value } = e.target;\r\n        const newCustomizedValues = [...editedCustomized[index]];\r\n        newCustomizedValues[subIndex] = parseFloat(value);\r\n        const newEditedCustomized = [...editedCustomized];\r\n        newEditedCustomized[index] = newCustomizedValues;\r\n        setEditedCustomized(newEditedCustomized);\r\n      };\r\n\r\n      // Function to check if the edited values equal the total quantity\r\n      const handleCheckTotal = (index) => {\r\n        const editedValues = editedCustomized[index];\r\n      \r\n        // Check if editedValues is an array with valid numbers\r\n        if (!Array.isArray(editedValues) || editedValues.some((value) => isNaN(parseFloat(value)))) {\r\n          handleEditPart(index);\r\n          return;\r\n        }\r\n      \r\n        // Calculate the total quantity based on editedCustomized values\r\n        const totalQuantity = editedValues.reduce((acc, val) => acc + parseFloat(val), 0);\r\n      \r\n        // Check if the total quantity matches the original quantity\r\n        if (totalQuantity === parts[index].quantity) {\r\n          // If they match, update the 'customized' array and exit edit mode\r\n          const newParts = [...parts];\r\n          newParts[index].customized = editedValues;\r\n          setParts(newParts);\r\n          handleEditPart(index); // Exit edit mode\r\n        } else {\r\n          // If they don't match, you can handle the error or display a message\r\n          alert(\"Total quantity does not match.\");\r\n        }\r\n      };\r\n      \r\n\r\n      //Handle Repack\r\n      const handleRepack = () => {\r\n        const updatedParts = [...parts];\r\n      \r\n        updatedParts.forEach((part, index) => {\r\n          if (part.quantity && part.repackedQuantity) {\r\n            updatedParts[index].customized = Repack(part.quantity, part.repackedQuantity);\r\n          } else {\r\n            updatedParts[index].customized = []; // Reset if either quantity or repackedQuantity is missing\r\n          }\r\n        });\r\n      \r\n        setParts(updatedParts);\r\n      };\r\n      \r\n\r\n    return(\r\n        <div>\r\n            <ShippingForm \r\n            shipping ={shipping}\r\n            handleChange ={handleShippingChange}\r\n            />\r\n            <PartForm\r\n            handleInputChange={handleInputChange}\r\n            handleRemovePart={handleRemovePart}\r\n            parts={parts} \r\n            editModes={editModes}\r\n            handleEditCustomizedChange={handleEditCustomizedChange}\r\n            handleEditPart={handleEditPart}\r\n            handleCheckTotal={handleCheckTotal}\r\n            handleRepack={handleRepack}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}