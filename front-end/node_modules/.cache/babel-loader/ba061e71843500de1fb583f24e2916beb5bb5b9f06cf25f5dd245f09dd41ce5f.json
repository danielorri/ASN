{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yanez\\\\Projects\\\\ASNProject\\\\front-end\\\\src\\\\components\\\\dashboard.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport PartForm from \"../forms/partsForm\";\nimport ShippingForm from \"../forms/shippingForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  //Shipping\n  const initialShippingValues = {\n    PackingSLipID: \"\",\n    ShippingDate: \"\",\n    DeliveryDate: \"\",\n    CarrierName: \"\",\n    TrackingNo: \"\"\n  };\n  const [shipping, setShipping] = useState(initialShippingValues);\n  const handleShippingChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setShipping({\n      ...shipping,\n      [name]: value\n    });\n  };\n\n  //Part\n  const initialPart = {\n    partNo: \"\",\n    quantity: \"\",\n    mixedOrMaster: \"Mixed\",\n    repackedQuantity: \"\"\n  };\n  const [parts, setParts] = useState([initialPart]);\n  const handleInputChange = (e, index) => {\n    const {\n      name,\n      value\n    } = e.target;\n    const updatedParts = [...parts];\n    updatedParts[index][name] = value;\n\n    // Automatically set the \"Repacked Quantity\" to the same value as \"Quantity\"\n    if (name === \"quantity\") {\n      updatedParts[index].repackedQuantity = value;\n    }\n\n    // Add a new row if the user is typing in the first field of the last row\n    if (index === updatedParts.length - 1 && name === \"partNo\" && value.trim() !== \"\") {\n      // If the new row is being created and the \"Part No.\" field is empty, reset all fields to empty\n      if (value.trim() === \"\" && Object.values(updatedParts[index]).every(Boolean)) {\n        updatedParts[index] = {\n          ...initialPart\n        };\n      } else if (value.trim() !== \"\" && Object.values(updatedParts[index]).every(Boolean)) {\n        // If the new row is being created and the \"Part No.\" field has a value, add a new empty row\n        updatedParts.push({\n          ...initialPart\n        });\n      }\n      updatedParts.push(initialPart);\n    }\n    setParts(updatedParts);\n  };\n  const handleRemovePart = index => {\n    const updatedParts = [...parts];\n\n    // Remove the row if the user clears the \"Part No.\" field\n    if (!updatedParts[index].partNo) {\n      updatedParts.splice(index, 1);\n    }\n    setParts(updatedParts);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ShippingForm, {\n      shipping: shipping,\n      handleChange: handleShippingChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PartForm, {\n      handleInputChange: handleInputChange,\n      handleRemovePart: handleRemovePart,\n      parts: parts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"Do9Mf1wvQYDlz+hqt/eZdaiNk2g=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","PartForm","ShippingForm","jsxDEV","_jsxDEV","Dashboard","_s","initialShippingValues","PackingSLipID","ShippingDate","DeliveryDate","CarrierName","TrackingNo","shipping","setShipping","handleShippingChange","e","name","value","target","initialPart","partNo","quantity","mixedOrMaster","repackedQuantity","parts","setParts","handleInputChange","index","updatedParts","length","trim","Object","values","every","Boolean","push","handleRemovePart","splice","children","handleChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yanez/Projects/ASNProject/front-end/src/components/dashboard.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport PartForm from \"../forms/partsForm\";\r\nimport ShippingForm from \"../forms/shippingForm\";\r\n\r\nconst Dashboard = ()=>{\r\n\r\n    //Shipping\r\n    const initialShippingValues= {\r\n        PackingSLipID: \"\",\r\n        ShippingDate: \"\",\r\n        DeliveryDate: \"\",\r\n        CarrierName: \"\",\r\n        TrackingNo: \"\"\r\n    };\r\n    const [shipping, setShipping] = useState(initialShippingValues);\r\n\r\n    const handleShippingChange = (e) =>{\r\n        const { name, value }= e.target;\r\n        setShipping({ ...shipping, [name]: value});\r\n    }\r\n\r\n    //Part\r\n    const initialPart = {\r\n        partNo: \"\",\r\n        quantity: \"\",\r\n        mixedOrMaster: \"Mixed\",\r\n        repackedQuantity: \"\",\r\n      };\r\n    \r\n      const [parts, setParts] = useState([initialPart]);\r\n    \r\n      const handleInputChange = (e, index) => {\r\n        const { name, value } = e.target;\r\n        const updatedParts = [...parts];\r\n        updatedParts[index][name] = value;\r\n    \r\n         // Automatically set the \"Repacked Quantity\" to the same value as \"Quantity\"\r\n         if (name === \"quantity\") {\r\n            updatedParts[index].repackedQuantity = value;\r\n          }  \r\n    \r\n         // Add a new row if the user is typing in the first field of the last row\r\n         if (index === updatedParts.length - 1 && name === \"partNo\" && value.trim() !== \"\") {\r\n            // If the new row is being created and the \"Part No.\" field is empty, reset all fields to empty\r\n            if (value.trim() === \"\" && Object.values(updatedParts[index]).every(Boolean)) {\r\n                updatedParts[index] = { ...initialPart };\r\n            } else if (value.trim() !== \"\" && Object.values(updatedParts[index]).every(Boolean)) {\r\n                // If the new row is being created and the \"Part No.\" field has a value, add a new empty row\r\n        updatedParts.push({ ...initialPart });\r\n      }\r\n            updatedParts.push(initialPart);\r\n          }\r\n    \r\n        setParts(updatedParts);\r\n      };\r\n    \r\n      const handleRemovePart = (index) => {\r\n        const updatedParts = [...parts];\r\n    \r\n        // Remove the row if the user clears the \"Part No.\" field\r\n        if (!updatedParts[index].partNo) {\r\n          updatedParts.splice(index, 1);\r\n        }\r\n    \r\n        setParts(updatedParts);\r\n      };\r\n    return(\r\n        <div>\r\n            <ShippingForm \r\n            shipping ={shipping}\r\n            handleChange ={handleShippingChange}\r\n            />\r\n            <PartForm\r\n            handleInputChange={handleInputChange}\r\n            handleRemovePart={handleRemovePart}\r\n            parts={parts} \r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}