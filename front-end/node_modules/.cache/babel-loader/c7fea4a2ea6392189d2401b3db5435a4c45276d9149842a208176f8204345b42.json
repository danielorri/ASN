{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\victor.yanez\\\\Projects\\\\Robot\\\\ASN\\\\front-end\\\\src\\\\components\\\\dashboard.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport PartForm from \"../forms/partsForm\";\nimport ShippingForm from \"../forms/shippingForm\";\nimport Repack from \"../FunctionHelpers/repackFunction\";\nimport getParts from \"../FunctionHelpers/getParts\";\nimport ProgressCenteredModal from \"./progressModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://10.100.110.185:3010\");\nlet socketId; // Variable to store the socket.id\n\nsocket.on(\"connect\", () => {\n  socketId = socket.id;\n});\nconst Dashboard = () => {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [modalShow, setModalShow] = useState(false);\n  const [messages, setMessages] = useState([]);\n\n  //Shipping\n  const initialShippingValues = {\n    PackingSLipID: \"\",\n    ShippingDate: \"\",\n    DeliveryDate: \"\",\n    CarrierName: \"\",\n    TrackingNo: \"\",\n    PlantCode: \"\",\n    Customer: \"\",\n    ShipTo: \"\"\n  };\n  const [shipping, setShipping] = useState(initialShippingValues);\n  const [isPartsClicked, setIsPartsClicked] = useState(true);\n  const [isDuplicates, setIsDuplicates] = useState(false);\n  const handleShippingChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    const generatedPackingSLipID = value.replace(/\\//g, '');\n    if (name === 'ShippingDate') {\n      setShipping({\n        ...shipping,\n        [name]: value,\n        PackingSLipID: generatedPackingSLipID\n      });\n    } else {\n      setShipping({\n        ...shipping,\n        [name]: value\n      });\n    }\n  };\n\n  //Part\n  const initialPart = {\n    partNo: \"\",\n    quantity: \"\",\n    mixedOrMaster: \"Mixed\",\n    repackedQuantity: \"\",\n    isDuplicate: false,\n    customized: []\n  };\n  const [parts, setParts] = useState([initialPart]);\n  const handleInputChange = (e, index) => {\n    const {\n      name,\n      value\n    } = e.target;\n    const updatedParts = [...parts];\n    updatedParts[index][name] = value;\n\n    // Automatically set the \"Repacked Quantity\" to the same value as \"Quantity\"\n    if (name === \"quantity\") {\n      updatedParts[index].repackedQuantity = value;\n    }\n\n    // Add a new row if the user is typing in the first field of the last row\n    if (index === updatedParts.length - 1 && name === \"partNo\" && value.trim() !== \"\") {\n      updatedParts.push({\n        partNo: \"\",\n        quantity: \"\",\n        mixedOrMaster: \"Mixed\",\n        repackedQuantity: \"\",\n        isDuplicate: false,\n        customized: []\n      });\n    }\n    setParts(updatedParts);\n  };\n  const handleRemovePart = index => {\n    const updatedParts = [...parts];\n    updatedParts.splice(index, 1);\n    setParts(updatedParts);\n  };\n\n  //Packages\n\n  const [editModes, setEditModes] = useState(new Array(parts.length).fill(false));\n  const handleEditPart = index => {\n    const newEditModes = [...editModes];\n    newEditModes[index] = !newEditModes[index];\n    setEditModes(newEditModes);\n  };\n\n  // Function to handle changes in individual customized inputs\n  const handleEditCustomizedChange = (e, index, subIndex) => {\n    const {\n      value\n    } = e.target;\n\n    // Create a deep copy of the current parts state\n    const updatedParts = [...parts];\n\n    // Update the customized value for the specified part\n    updatedParts[index].customized[subIndex] = parseFloat(value);\n\n    // Set the updated parts state\n    setParts(updatedParts);\n  };\n\n  // Function to check if the edited values equal the total quantity\n  const handleCheckTotal = index => {\n    const part = parts[index];\n\n    // Calculate the total quantity based on customized values\n    const totalQuantity = part.customized.reduce((acc, value) => acc + value, 0);\n\n    // Check if the total quantity matches the original quantity\n    if (totalQuantity === parseFloat(part.quantity)) {\n      // If they match, exit edit mode if needed\n      if (editModes[index]) {\n        handleEditPart(index); // Exit edit mode\n      }\n    } else {\n      // If they don't match, you can handle the error or display a message\n      alert(\"Total quantity does not match.\");\n    }\n  };\n  //Handle Repack\n  const handleRepack = () => {\n    const updatedParts = [...parts];\n    updatedParts.forEach((part, index) => {\n      if (part.quantity && part.repackedQuantity) {\n        updatedParts[index].customized = Repack(parseFloat(part.quantity), parseFloat(part.repackedQuantity));\n      } else {\n        updatedParts[index].customized = []; // Reset if either quantity or repackedQuantity is missing\n      }\n    });\n    setParts(updatedParts);\n  };\n\n  //SubmitASN\n  // State to store the response from the server\n  const [serverResponse, setServerResponse] = useState(\"\");\n  useEffect(() => {\n    // Set up a listener for the 'progressUpdate' event from the server\n    socket.on(\"progressUpdate\", data => {\n      setProgress(data.progress);\n      setServerResponse(data.message);\n      setMessages(prevMessages => [data.message, ...prevMessages]);\n      // Handle the progress update as needed\n    });\n\n    // Cleanup the socket listener on component unmount\n    return () => {\n      socket.off(\"progressUpdate\");\n    };\n  }, []);\n  const handleElectroluxAspRevise = async () => {\n    try {\n      const res = handleCheckDuplicate();\n      if (res) {\n        alert(\"Duplicate parts\");\n      } else {\n        // Prepare the data to send to the server\n        const dataToSend = {\n          parts,\n          shipping\n        };\n\n        // Send a POST request to the server\n        const response = await fetch(\"http://10.100.110.185:3010/resviseASPElectrolux\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(dataToSend)\n        });\n\n        // Check if the response is successful (you can modify the condition)\n        if (response.status === 200) {\n          const responseData = await response.json();\n          // Handle the response data as needed\n          setServerResponse(responseData.message);\n        } else {\n          // Handle error responses\n          setServerResponse(\"Error: Failed to submit data to the server\");\n        }\n      }\n    } catch (error) {\n      // Handle any network or other errors\n      console.error(\"Error:\", error);\n      setServerResponse(\"Error: Something went wrong\");\n    }\n  };\n  const handleElectroluxAspSubmit = async () => {\n    try {\n      const res = handleCheckDuplicate();\n      if (res) {\n        alert(\"Duplicate parts\");\n      } else {\n        // Prepare the data to send to the server\n        const dataToSend = {\n          parts,\n          shipping\n        };\n\n        // Send a POST request to the server\n        const response = await fetch(\"http://10.100.110.185:3010/buildASPElectrolux\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(dataToSend)\n        });\n\n        // Check if the response is successful (you can modify the condition)\n        if (response.status === 200) {\n          const responseData = await response.json();\n          // Handle the response data as needed\n          setServerResponse(responseData.message);\n        } else {\n          // Handle error responses\n          setServerResponse(\"Error: Failed to submit data to the server\");\n        }\n      }\n    } catch (error) {\n      // Handle any network or other errors\n      console.error(\"Error:\", error);\n      setServerResponse(\"Error: Something went wrong\");\n    }\n  };\n  const handleSubmit = async () => {\n    try {\n      const res = handleCheckDuplicate();\n      if (res) {\n        alert(\"Duplicate parts\");\n      } else if (parts[0].customized.length === 0) {\n        alert(\"Repack before submitting.\");\n      } else {\n        setModalShow(true);\n        const dataToSend = {\n          parts,\n          shipping,\n          cookies: document.cookie\n        };\n        const response = await fetch(\"http://10.100.110.185:3010/buildASN\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"socketId\": socketId\n          },\n          body: JSON.stringify(dataToSend)\n        });\n        if (response.status === 200) {\n          const responseData = await response.json();\n          console.log(responseData);\n          setServerResponse(responseData.message.message);\n        } else {\n          setServerResponse(\"Error: Failed to submit data to the server\");\n        }\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      setServerResponse(\"Error: Something went wrong\");\n    }\n  };\n  function getFormattedToday() {\n    const today = new Date();\n    const month = (today.getMonth() + 1).toString().padStart(2, '0');\n    const day = today.getDate().toString().padStart(2, '0');\n    const year = today.getFullYear().toString();\n    return `${month}/${day}/${year.slice(2)}`;\n  }\n\n  //get Parts\n  const handleGetParts = async () => {\n    try {\n      const orders = await getParts(shipping);\n      const transformedParts = orders.flatMap(order => {\n        const isMixed = order.Parts.length === 1;\n        const mixedOrMaster = isMixed ? \"Master\" : \"Mixed\";\n        return order.Parts.map(part => ({\n          partNo: part.CustomerPart,\n          quantity: part.PartQuantity,\n          mixedOrMaster,\n          repackedQuantity: part.PartQuantity,\n          isDuplicate: false,\n          customized: []\n        }));\n      });\n\n      // Add an empty object to the transformedParts array\n      transformedParts.push({\n        partNo: \"\",\n        quantity: \"\",\n        mixedOrMaster: \"Mixed\",\n        repackedQuantity: \"\",\n        isDuplicate: false,\n        customized: []\n      });\n      setParts(transformedParts);\n      setIsPartsClicked(true);\n    } catch (error) {\n      console.error('Error fetching parts:', error);\n      // Handle errors as needed\n    }\n  };\n  const handleCheckDuplicate = () => {\n    const partNos = new Set();\n    const duplicatePartNos = new Set();\n\n    // Iterate through all parts to check for duplicates\n    parts.forEach(part => {\n      const {\n        partNo\n      } = part;\n      if (partNos.has(partNo)) {\n        duplicatePartNos.add(partNo);\n      } else {\n        partNos.add(partNo);\n      }\n    });\n\n    // Update state to mark duplicates\n    const updatedParts = parts.map(part => ({\n      ...part,\n      isDuplicate: duplicatePartNos.has(part.partNo)\n    }));\n    if (duplicatePartNos.size > 0) {\n      // Duplicates found\n      setIsDuplicates(true);\n    } else {\n      // No duplicates found\n      setIsDuplicates(false);\n    }\n\n    // Update the state with the new information\n    setParts(updatedParts);\n    if (duplicatePartNos.size > 0) {\n      // Duplicates found\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ShippingForm, {\n      shipping: shipping,\n      handleChange: handleShippingChange,\n      handleGetParts: handleGetParts,\n      today: getFormattedToday()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PartForm, {\n      handleInputChange: handleInputChange,\n      handleRemovePart: handleRemovePart,\n      parts: parts,\n      editModes: editModes,\n      handleEditCustomizedChange: handleEditCustomizedChange,\n      handleEditPart: handleEditPart,\n      handleCheckTotal: handleCheckTotal,\n      handleRepack: handleRepack,\n      isDuplicates: isDuplicates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 13\n    }, this), shipping.Customer === '9675' && shipping.ShippingDate !== getFormattedToday() || shipping.Customer === '9676' && shipping.ShippingDate !== getFormattedToday() || shipping.Customer === '10105' && shipping.ShippingDate !== getFormattedToday() || shipping.Customer === '10053' && shipping.ShippingDate !== getFormattedToday() ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleElectroluxAspSubmit,\n      className: \"submit\",\n      disabled: !isPartsClicked,\n      children: \"Submit ASP Electrolux\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 50\n    }, this) : shipping.Customer === '9675' || shipping.Customer === '9676' || shipping.Customer === '10105' || shipping.Customer === '10053' ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleElectroluxAspRevise,\n      className: \"submit\",\n      disabled: !isPartsClicked,\n      children: \"Revise ASP Electrolux\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 3\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      className: \"submit\",\n      disabled: !isPartsClicked,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 125\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"m-2\",\n      children: serverResponse && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Server Response: \", serverResponse]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(ProgressCenteredModal, {\n      show: modalShow,\n      onHide: () => setModalShow(false),\n      progress: progress,\n      serverResponse: serverResponse,\n      messages: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 385,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"X8KGirhML8xKfpEuN+hvwi+LEI4=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","io","PartForm","ShippingForm","Repack","getParts","ProgressCenteredModal","jsxDEV","_jsxDEV","socket","socketId","on","id","Dashboard","_s","progress","setProgress","modalShow","setModalShow","messages","setMessages","initialShippingValues","PackingSLipID","ShippingDate","DeliveryDate","CarrierName","TrackingNo","PlantCode","Customer","ShipTo","shipping","setShipping","isPartsClicked","setIsPartsClicked","isDuplicates","setIsDuplicates","handleShippingChange","e","name","value","target","generatedPackingSLipID","replace","initialPart","partNo","quantity","mixedOrMaster","repackedQuantity","isDuplicate","customized","parts","setParts","handleInputChange","index","updatedParts","length","trim","push","handleRemovePart","splice","editModes","setEditModes","Array","fill","handleEditPart","newEditModes","handleEditCustomizedChange","subIndex","parseFloat","handleCheckTotal","part","totalQuantity","reduce","acc","alert","handleRepack","forEach","serverResponse","setServerResponse","data","message","prevMessages","off","handleElectroluxAspRevise","res","handleCheckDuplicate","dataToSend","response","fetch","method","headers","body","JSON","stringify","status","responseData","json","error","console","handleElectroluxAspSubmit","handleSubmit","cookies","document","cookie","log","getFormattedToday","today","Date","month","getMonth","toString","padStart","day","getDate","year","getFullYear","slice","handleGetParts","orders","transformedParts","flatMap","order","isMixed","Parts","map","CustomerPart","PartQuantity","partNos","Set","duplicatePartNos","has","add","size","children","handleChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","disabled","show","onHide","_c","$RefreshReg$"],"sources":["C:/Users/victor.yanez/Projects/Robot/ASN/front-end/src/components/dashboard.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport PartForm from \"../forms/partsForm\";\r\nimport ShippingForm from \"../forms/shippingForm\";\r\nimport Repack from \"../FunctionHelpers/repackFunction\";\r\nimport getParts from \"../FunctionHelpers/getParts\";\r\nimport ProgressCenteredModal from \"./progressModal\";\r\n\r\nconst socket = io(\"http://10.100.110.185:3010\");\r\nlet socketId; // Variable to store the socket.id\r\n\r\nsocket.on(\"connect\", () => {\r\n  socketId = socket.id;\r\n});\r\n\r\nconst Dashboard = ()=>{\r\n  const [progress, setProgress] = useState(0);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n    //Shipping\r\n    const initialShippingValues= {\r\n        PackingSLipID: \"\",\r\n        ShippingDate: \"\",\r\n        DeliveryDate: \"\",\r\n        CarrierName: \"\",\r\n        TrackingNo: \"\",\r\n        PlantCode: \"\",\r\n        Customer: \"\",\r\n        ShipTo: \"\"\r\n    };\r\n    const [shipping, setShipping] = useState(initialShippingValues);\r\n    const [isPartsClicked, setIsPartsClicked] = useState(true);\r\n    const [isDuplicates, setIsDuplicates] = useState(false);\r\n\r\n    const handleShippingChange = (e) =>{\r\n        const { name, value }= e.target;\r\n        const generatedPackingSLipID = value.replace(/\\//g, ''); \r\n        if(name === 'ShippingDate'){\r\n          setShipping({ ...shipping, [name]: value, PackingSLipID: generatedPackingSLipID});\r\n        } else{\r\n          setShipping({ ...shipping, [name]: value});\r\n        }\r\n    }\r\n\r\n    //Part\r\n    const initialPart = {\r\n        partNo: \"\",\r\n        quantity: \"\",\r\n        mixedOrMaster: \"Mixed\",\r\n        repackedQuantity: \"\",\r\n        isDuplicate: false,\r\n        customized:[]\r\n      };\r\n    \r\n      const [parts, setParts] = useState([initialPart]);\r\n    \r\n      const handleInputChange = (e, index) => {\r\n        const { name, value } = e.target;\r\n        const updatedParts = [...parts];\r\n        updatedParts[index][name] = value;\r\n    \r\n         // Automatically set the \"Repacked Quantity\" to the same value as \"Quantity\"\r\n         if (name === \"quantity\") {\r\n            updatedParts[index].repackedQuantity = value;\r\n          }\r\n\r\n         // Add a new row if the user is typing in the first field of the last row\r\n         if (index === updatedParts.length - 1 && name === \"partNo\" && value.trim() !== \"\") {\r\n            updatedParts.push({\r\n                partNo: \"\",\r\n                quantity: \"\",\r\n                mixedOrMaster: \"Mixed\",\r\n                repackedQuantity: \"\",\r\n                isDuplicate: false,\r\n                customized:[]\r\n              });\r\n          }\r\n    \r\n        setParts(updatedParts);\r\n      };\r\n    \r\n      const handleRemovePart = (index) => {\r\n        const updatedParts = [...parts];\r\n    \r\n        \r\n          updatedParts.splice(index, 1);\r\n        \r\n    \r\n        setParts(updatedParts);\r\n      };\r\n\r\n      //Packages\r\n      \r\n      const [editModes, setEditModes] = useState(new Array(parts.length).fill(false));\r\n\r\n      const handleEditPart = (index) => {\r\n        const newEditModes = [...editModes];\r\n        newEditModes[index] = !newEditModes[index];\r\n        setEditModes(newEditModes);\r\n      };\r\n      \r\n      // Function to handle changes in individual customized inputs\r\n      const handleEditCustomizedChange = (e, index, subIndex) => {\r\n        const { value } = e.target;\r\n\r\n      // Create a deep copy of the current parts state\r\n      const updatedParts = [...parts];\r\n\r\n      // Update the customized value for the specified part\r\n      updatedParts[index].customized[subIndex] = parseFloat(value);\r\n\r\n      // Set the updated parts state\r\n      setParts(updatedParts);\r\n      };\r\n\r\n      // Function to check if the edited values equal the total quantity\r\n      const handleCheckTotal = (index) => {\r\n        const part = parts[index];\r\n      \r\n        // Calculate the total quantity based on customized values\r\n        const totalQuantity = part.customized.reduce((acc, value) => acc + value, 0);\r\n\r\n        // Check if the total quantity matches the original quantity\r\n        if (totalQuantity === parseFloat(part.quantity)) {\r\n          // If they match, exit edit mode if needed\r\n          if (editModes[index]) {\r\n            handleEditPart(index); // Exit edit mode\r\n          }\r\n        } else {\r\n          // If they don't match, you can handle the error or display a message\r\n          alert(\"Total quantity does not match.\");\r\n        }\r\n      };\r\n      //Handle Repack\r\n      const handleRepack = () => {\r\n        const updatedParts = [...parts];\r\n        updatedParts.forEach((part, index) => {\r\n          if (part.quantity && part.repackedQuantity) {\r\n            updatedParts[index].customized = Repack(parseFloat(part.quantity), parseFloat(part.repackedQuantity));\r\n          } else {\r\n            updatedParts[index].customized = []; // Reset if either quantity or repackedQuantity is missing\r\n          }\r\n        });\r\n      \r\n        setParts(updatedParts);\r\n      };\r\n      \r\n      //SubmitASN\r\n      // State to store the response from the server\r\n  const [serverResponse, setServerResponse] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // Set up a listener for the 'progressUpdate' event from the server\r\n    socket.on(\"progressUpdate\", (data) => {\r\n      setProgress(data.progress);\r\n      setServerResponse(data.message);\r\n      setMessages((prevMessages) => [data.message, ...prevMessages]);\r\n      // Handle the progress update as needed\r\n    });\r\n\r\n    // Cleanup the socket listener on component unmount\r\n    return () => {\r\n      socket.off(\"progressUpdate\");\r\n    };\r\n  }, []);\r\n\r\n  const handleElectroluxAspRevise = async () => {\r\n    try {\r\n\r\n      const res = handleCheckDuplicate();\r\n\r\n      if(res){\r\n        alert(\"Duplicate parts\");\r\n      } else {\r\n      // Prepare the data to send to the server\r\n      const dataToSend = {\r\n        parts,\r\n        shipping,\r\n      };\r\n\r\n        // Send a POST request to the server\r\n      const response = await fetch(\"http://10.100.110.185:3010/resviseASPElectrolux\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(dataToSend),\r\n      });\r\n\r\n      // Check if the response is successful (you can modify the condition)\r\n      if (response.status === 200) {\r\n        const responseData = await response.json();\r\n        // Handle the response data as needed\r\n        setServerResponse(responseData.message);\r\n      } else {\r\n        // Handle error responses\r\n        setServerResponse(\"Error: Failed to submit data to the server\");\r\n      }\r\n      }\r\n      \r\n    } catch (error) {\r\n      // Handle any network or other errors\r\n      console.error(\"Error:\", error);\r\n      setServerResponse(\"Error: Something went wrong\");\r\n    }\r\n  };\r\n\r\n\r\n  const handleElectroluxAspSubmit = async () => {\r\n    try {\r\n\r\n      const res = handleCheckDuplicate();\r\n\r\n      if(res){\r\n        alert(\"Duplicate parts\");\r\n      } else {\r\n      // Prepare the data to send to the server\r\n      const dataToSend = {\r\n        parts,\r\n        shipping,\r\n      };\r\n\r\n        // Send a POST request to the server\r\n      const response = await fetch(\"http://10.100.110.185:3010/buildASPElectrolux\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(dataToSend),\r\n      });\r\n\r\n      // Check if the response is successful (you can modify the condition)\r\n      if (response.status === 200) {\r\n        const responseData = await response.json();\r\n        // Handle the response data as needed\r\n        setServerResponse(responseData.message);\r\n      } else {\r\n        // Handle error responses\r\n        setServerResponse(\"Error: Failed to submit data to the server\");\r\n      }\r\n      }\r\n\r\n      \r\n    } catch (error) {\r\n      // Handle any network or other errors\r\n      console.error(\"Error:\", error);\r\n      setServerResponse(\"Error: Something went wrong\");\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n\r\n    try {\r\n      const res = handleCheckDuplicate();\r\n\r\n      if(res){\r\n        alert(\"Duplicate parts\");\r\n      } else if(parts[0].customized.length === 0){\r\n        alert(\"Repack before submitting.\");\r\n      } else {\r\n        setModalShow(true);\r\n     \r\n      const dataToSend = {\r\n        parts,\r\n        shipping,\r\n        cookies: document.cookie,\r\n      };\r\n\r\n        const response = await fetch(\"http://10.100.110.185:3010/buildASN\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"socketId\": socketId,\r\n          },\r\n          body: JSON.stringify(dataToSend),\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          const responseData = await response.json();\r\n          console.log(responseData);\r\n          setServerResponse(responseData.message.message);\r\n        } else {\r\n          setServerResponse(\"Error: Failed to submit data to the server\");\r\n        }\r\n      }\r\n      \r\n      \r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      setServerResponse(\"Error: Something went wrong\");\r\n    }\r\n  };\r\n  \r\n\r\n  function getFormattedToday() {\r\n    const today = new Date();\r\n    const month = (today.getMonth() + 1).toString().padStart(2, '0');\r\n    const day = today.getDate().toString().padStart(2, '0');\r\n    const year = today.getFullYear().toString();\r\n  \r\n    return `${month}/${day}/${year.slice(2)}`;\r\n  }\r\n  \r\n\r\n  //get Parts\r\n  const handleGetParts = async () => {\r\n    try {\r\n      const orders = await getParts(shipping);\r\n\r\n      const transformedParts = orders.flatMap(order => {\r\n        const isMixed = order.Parts.length === 1;\r\n        const mixedOrMaster = isMixed ? \"Master\" : \"Mixed\";\r\n\r\n        return order.Parts.map(part => ({\r\n          partNo: part.CustomerPart,\r\n          quantity: part.PartQuantity,\r\n          mixedOrMaster,\r\n          repackedQuantity: part.PartQuantity,\r\n          isDuplicate: false,\r\n          customized: [],\r\n        }));\r\n      });\r\n\r\n      // Add an empty object to the transformedParts array\r\n      transformedParts.push({\r\n        partNo: \"\",\r\n        quantity: \"\",\r\n        mixedOrMaster: \"Mixed\",\r\n        repackedQuantity: \"\",\r\n        isDuplicate: false,\r\n        customized: [],\r\n      });\r\n\r\n      setParts(transformedParts);\r\n      setIsPartsClicked(true);\r\n    } catch (error) {\r\n      console.error('Error fetching parts:', error);\r\n      // Handle errors as needed\r\n    }\r\n  };\r\n\r\n  const handleCheckDuplicate = () => {\r\n    const partNos = new Set();\r\n    const duplicatePartNos = new Set();\r\n  \r\n    // Iterate through all parts to check for duplicates\r\n    parts.forEach((part) => {\r\n      const { partNo } = part;\r\n  \r\n      if (partNos.has(partNo)) {\r\n        duplicatePartNos.add(partNo);\r\n      } else {\r\n        partNos.add(partNo);\r\n      }\r\n    });\r\n  \r\n    // Update state to mark duplicates\r\n    const updatedParts = parts.map((part) => ({\r\n      ...part,\r\n      isDuplicate: duplicatePartNos.has(part.partNo),\r\n    }));\r\n\r\n    if (duplicatePartNos.size > 0) {\r\n      // Duplicates found\r\n      setIsDuplicates(true);\r\n    } else {\r\n      // No duplicates found\r\n      setIsDuplicates(false);\r\n    }\r\n  \r\n    // Update the state with the new information\r\n    setParts(updatedParts);\r\n\r\n    if (duplicatePartNos.size > 0) {\r\n      // Duplicates found\r\n      return true;\r\n    }  else {\r\n      return false\r\n    }\r\n  };\r\n  \r\n\r\n    return(\r\n        <div>\r\n            <ShippingForm \r\n            shipping ={shipping}\r\n            handleChange ={handleShippingChange}\r\n            handleGetParts={handleGetParts}\r\n            \r\n            today={getFormattedToday()}\r\n            />\r\n            <PartForm\r\n            handleInputChange={handleInputChange}\r\n            handleRemovePart={handleRemovePart}\r\n            parts={parts} \r\n            editModes={editModes}\r\n            handleEditCustomizedChange={handleEditCustomizedChange}\r\n            handleEditPart={handleEditPart}\r\n            handleCheckTotal={handleCheckTotal}\r\n            handleRepack={handleRepack}\r\n            isDuplicates={isDuplicates}\r\n            />\r\n          {shipping.Customer === '9675' && shipping.ShippingDate !== getFormattedToday() || shipping.Customer === '9676' && shipping.ShippingDate !== getFormattedToday() || shipping.Customer === '10105' && shipping.ShippingDate !== getFormattedToday() || shipping.Customer === '10053' &&\r\n  shipping.ShippingDate !== getFormattedToday() ?<button onClick={handleElectroluxAspSubmit} className=\"submit\" disabled={!isPartsClicked}>Submit ASP Electrolux</button>:shipping.Customer === '9675' || shipping.Customer === '9676' || shipping.Customer === '10105' || shipping.Customer === '10053'?\r\n  <button onClick={handleElectroluxAspRevise} className=\"submit\" disabled={!isPartsClicked}>Revise ASP Electrolux</button>: <button onClick={handleSubmit} className=\"submit\" disabled={!isPartsClicked}>Submit</button>}\r\n          \r\n          \r\n          <div className=\"m-2\">\r\n            {serverResponse && <p>Server Response: {serverResponse}</p>}\r\n          </div>\r\n\r\n      <ProgressCenteredModal \r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        progress={progress}\r\n        serverResponse={serverResponse}\r\n        messages = {messages}\r\n      />\r\n          \r\n          {/* {progress && <p>Progress: {progress}</p> }\r\n          {message && <p>message: {message}</p>} */}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}